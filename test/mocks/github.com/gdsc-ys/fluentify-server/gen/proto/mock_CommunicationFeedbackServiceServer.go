// Code generated by mockery v2.40.3. DO NOT EDIT.

package ___test

import (
	context "context"

	__ "github.com/gdsc-ys/fluentify-server/gen/proto"

	mock "github.com/stretchr/testify/mock"
)

// MockCommunicationFeedbackServiceServer is an autogenerated mock type for the CommunicationFeedbackServiceServer type
type MockCommunicationFeedbackServiceServer struct {
	mock.Mock
}

type MockCommunicationFeedbackServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommunicationFeedbackServiceServer) EXPECT() *MockCommunicationFeedbackServiceServer_Expecter {
	return &MockCommunicationFeedbackServiceServer_Expecter{mock: &_m.Mock}
}

// CommunicationFeedback provides a mock function with given fields: _a0, _a1
func (_m *MockCommunicationFeedbackServiceServer) CommunicationFeedback(_a0 context.Context, _a1 *__.CommunicationFeedbackRequest) (*__.CommunicationFeedbackResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CommunicationFeedback")
	}

	var r0 *__.CommunicationFeedbackResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *__.CommunicationFeedbackRequest) (*__.CommunicationFeedbackResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *__.CommunicationFeedbackRequest) *__.CommunicationFeedbackResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*__.CommunicationFeedbackResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *__.CommunicationFeedbackRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommunicationFeedbackServiceServer_CommunicationFeedback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommunicationFeedback'
type MockCommunicationFeedbackServiceServer_CommunicationFeedback_Call struct {
	*mock.Call
}

// CommunicationFeedback is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *__.CommunicationFeedbackRequest
func (_e *MockCommunicationFeedbackServiceServer_Expecter) CommunicationFeedback(_a0 interface{}, _a1 interface{}) *MockCommunicationFeedbackServiceServer_CommunicationFeedback_Call {
	return &MockCommunicationFeedbackServiceServer_CommunicationFeedback_Call{Call: _e.mock.On("CommunicationFeedback", _a0, _a1)}
}

func (_c *MockCommunicationFeedbackServiceServer_CommunicationFeedback_Call) Run(run func(_a0 context.Context, _a1 *__.CommunicationFeedbackRequest)) *MockCommunicationFeedbackServiceServer_CommunicationFeedback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*__.CommunicationFeedbackRequest))
	})
	return _c
}

func (_c *MockCommunicationFeedbackServiceServer_CommunicationFeedback_Call) Return(_a0 *__.CommunicationFeedbackResponse, _a1 error) *MockCommunicationFeedbackServiceServer_CommunicationFeedback_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommunicationFeedbackServiceServer_CommunicationFeedback_Call) RunAndReturn(run func(context.Context, *__.CommunicationFeedbackRequest) (*__.CommunicationFeedbackResponse, error)) *MockCommunicationFeedbackServiceServer_CommunicationFeedback_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedCommunicationFeedbackServiceServer provides a mock function with given fields:
func (_m *MockCommunicationFeedbackServiceServer) mustEmbedUnimplementedCommunicationFeedbackServiceServer() {
	_m.Called()
}

// MockCommunicationFeedbackServiceServer_mustEmbedUnimplementedCommunicationFeedbackServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedCommunicationFeedbackServiceServer'
type MockCommunicationFeedbackServiceServer_mustEmbedUnimplementedCommunicationFeedbackServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedCommunicationFeedbackServiceServer is a helper method to define mock.On call
func (_e *MockCommunicationFeedbackServiceServer_Expecter) mustEmbedUnimplementedCommunicationFeedbackServiceServer() *MockCommunicationFeedbackServiceServer_mustEmbedUnimplementedCommunicationFeedbackServiceServer_Call {
	return &MockCommunicationFeedbackServiceServer_mustEmbedUnimplementedCommunicationFeedbackServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedCommunicationFeedbackServiceServer")}
}

func (_c *MockCommunicationFeedbackServiceServer_mustEmbedUnimplementedCommunicationFeedbackServiceServer_Call) Run(run func()) *MockCommunicationFeedbackServiceServer_mustEmbedUnimplementedCommunicationFeedbackServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommunicationFeedbackServiceServer_mustEmbedUnimplementedCommunicationFeedbackServiceServer_Call) Return() *MockCommunicationFeedbackServiceServer_mustEmbedUnimplementedCommunicationFeedbackServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCommunicationFeedbackServiceServer_mustEmbedUnimplementedCommunicationFeedbackServiceServer_Call) RunAndReturn(run func()) *MockCommunicationFeedbackServiceServer_mustEmbedUnimplementedCommunicationFeedbackServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommunicationFeedbackServiceServer creates a new instance of MockCommunicationFeedbackServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommunicationFeedbackServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommunicationFeedbackServiceServer {
	mock := &MockCommunicationFeedbackServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
