// Code generated by mockery v2.41.0. DO NOT EDIT.

package handler_test

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// MockUserHandler is an autogenerated mock type for the UserHandler type
type MockUserHandler struct {
	mock.Mock
}

type MockUserHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserHandler) EXPECT() *MockUserHandler_Expecter {
	return &MockUserHandler_Expecter{mock: &_m.Mock}
}

// DeleteUser provides a mock function with given fields: c
func (_m *MockUserHandler) DeleteUser(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserHandler_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserHandler_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - c echo.Context
func (_e *MockUserHandler_Expecter) DeleteUser(c interface{}) *MockUserHandler_DeleteUser_Call {
	return &MockUserHandler_DeleteUser_Call{Call: _e.mock.On("DeleteUser", c)}
}

func (_c *MockUserHandler_DeleteUser_Call) Run(run func(c echo.Context)) *MockUserHandler_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockUserHandler_DeleteUser_Call) Return(_a0 error) *MockUserHandler_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserHandler_DeleteUser_Call) RunAndReturn(run func(echo.Context) error) *MockUserHandler_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: c
func (_m *MockUserHandler) GetUser(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserHandler_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserHandler_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - c echo.Context
func (_e *MockUserHandler_Expecter) GetUser(c interface{}) *MockUserHandler_GetUser_Call {
	return &MockUserHandler_GetUser_Call{Call: _e.mock.On("GetUser", c)}
}

func (_c *MockUserHandler_GetUser_Call) Run(run func(c echo.Context)) *MockUserHandler_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockUserHandler_GetUser_Call) Return(_a0 error) *MockUserHandler_GetUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserHandler_GetUser_Call) RunAndReturn(run func(echo.Context) error) *MockUserHandler_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: c
func (_m *MockUserHandler) UpdateUser(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserHandler_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserHandler_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - c echo.Context
func (_e *MockUserHandler_Expecter) UpdateUser(c interface{}) *MockUserHandler_UpdateUser_Call {
	return &MockUserHandler_UpdateUser_Call{Call: _e.mock.On("UpdateUser", c)}
}

func (_c *MockUserHandler_UpdateUser_Call) Run(run func(c echo.Context)) *MockUserHandler_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockUserHandler_UpdateUser_Call) Return(_a0 error) *MockUserHandler_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserHandler_UpdateUser_Call) RunAndReturn(run func(echo.Context) error) *MockUserHandler_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserHandler creates a new instance of MockUserHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserHandler {
	mock := &MockUserHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
