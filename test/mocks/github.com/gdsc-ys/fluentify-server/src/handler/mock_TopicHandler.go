// Code generated by mockery v2.40.3. DO NOT EDIT.

package handler_test

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// MockTopicHandler is an autogenerated mock type for the TopicHandler type
type MockTopicHandler struct {
	mock.Mock
}

type MockTopicHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTopicHandler) EXPECT() *MockTopicHandler_Expecter {
	return &MockTopicHandler_Expecter{mock: &_m.Mock}
}

// GetTopic provides a mock function with given fields: c
func (_m *MockTopicHandler) GetTopic(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetTopic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTopicHandler_GetTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopic'
type MockTopicHandler_GetTopic_Call struct {
	*mock.Call
}

// GetTopic is a helper method to define mock.On call
//   - c echo.Context
func (_e *MockTopicHandler_Expecter) GetTopic(c interface{}) *MockTopicHandler_GetTopic_Call {
	return &MockTopicHandler_GetTopic_Call{Call: _e.mock.On("GetTopic", c)}
}

func (_c *MockTopicHandler_GetTopic_Call) Run(run func(c echo.Context)) *MockTopicHandler_GetTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockTopicHandler_GetTopic_Call) Return(_a0 error) *MockTopicHandler_GetTopic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTopicHandler_GetTopic_Call) RunAndReturn(run func(echo.Context) error) *MockTopicHandler_GetTopic_Call {
	_c.Call.Return(run)
	return _c
}

// ListTopics provides a mock function with given fields: c
func (_m *MockTopicHandler) ListTopics(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for ListTopics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTopicHandler_ListTopics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTopics'
type MockTopicHandler_ListTopics_Call struct {
	*mock.Call
}

// ListTopics is a helper method to define mock.On call
//   - c echo.Context
func (_e *MockTopicHandler_Expecter) ListTopics(c interface{}) *MockTopicHandler_ListTopics_Call {
	return &MockTopicHandler_ListTopics_Call{Call: _e.mock.On("ListTopics", c)}
}

func (_c *MockTopicHandler_ListTopics_Call) Run(run func(c echo.Context)) *MockTopicHandler_ListTopics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockTopicHandler_ListTopics_Call) Return(_a0 error) *MockTopicHandler_ListTopics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTopicHandler_ListTopics_Call) RunAndReturn(run func(echo.Context) error) *MockTopicHandler_ListTopics_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTopicHandler creates a new instance of MockTopicHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTopicHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTopicHandler {
	mock := &MockTopicHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
