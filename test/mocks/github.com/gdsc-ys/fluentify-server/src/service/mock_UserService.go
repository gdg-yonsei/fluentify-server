// Code generated by mockery v2.40.3. DO NOT EDIT.

package service_test

import (
	model "github.com/gdsc-ys/fluentify-server/src/model"
	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// DeleteUser provides a mock function with given fields: id
func (_m *MockUserService) DeleteUser(id string) string {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockUserService_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserService_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - id string
func (_e *MockUserService_Expecter) DeleteUser(id interface{}) *MockUserService_DeleteUser_Call {
	return &MockUserService_DeleteUser_Call{Call: _e.mock.On("DeleteUser", id)}
}

func (_c *MockUserService_DeleteUser_Call) Run(run func(id string)) *MockUserService_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_DeleteUser_Call) Return(_a0 string) *MockUserService_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_DeleteUser_Call) RunAndReturn(run func(string) string) *MockUserService_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: id
func (_m *MockUserService) GetUser(id string) model.User {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 model.User
	if rf, ok := ret.Get(0).(func(string) model.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	return r0
}

// MockUserService_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserService_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - id string
func (_e *MockUserService_Expecter) GetUser(id interface{}) *MockUserService_GetUser_Call {
	return &MockUserService_GetUser_Call{Call: _e.mock.On("GetUser", id)}
}

func (_c *MockUserService_GetUser_Call) Run(run func(id string)) *MockUserService_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_GetUser_Call) Return(_a0 model.User) *MockUserService_GetUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_GetUser_Call) RunAndReturn(run func(string) model.User) *MockUserService_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: id, updateUserDTO
func (_m *MockUserService) UpdateUser(id string, updateUserDTO map[string]interface{}) (model.User, error) {
	ret := _m.Called(id, updateUserDTO)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) (model.User, error)); ok {
		return rf(id, updateUserDTO)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) model.User); ok {
		r0 = rf(id, updateUserDTO)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = rf(id, updateUserDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - id string
//   - updateUserDTO map[string]interface{}
func (_e *MockUserService_Expecter) UpdateUser(id interface{}, updateUserDTO interface{}) *MockUserService_UpdateUser_Call {
	return &MockUserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", id, updateUserDTO)}
}

func (_c *MockUserService_UpdateUser_Call) Run(run func(id string, updateUserDTO map[string]interface{})) *MockUserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *MockUserService_UpdateUser_Call) Return(_a0 model.User, _a1 error) *MockUserService_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_UpdateUser_Call) RunAndReturn(run func(string, map[string]interface{}) (model.User, error)) *MockUserService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
