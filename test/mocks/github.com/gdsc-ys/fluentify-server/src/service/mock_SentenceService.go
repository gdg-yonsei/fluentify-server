// Code generated by mockery v2.40.3. DO NOT EDIT.

package service_test

import (
	model "github.com/gdsc-ys/fluentify-server/src/model"
	mock "github.com/stretchr/testify/mock"
)

// MockSentenceService is an autogenerated mock type for the SentenceService type
type MockSentenceService struct {
	mock.Mock
}

type MockSentenceService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSentenceService) EXPECT() *MockSentenceService_Expecter {
	return &MockSentenceService_Expecter{mock: &_m.Mock}
}

// GetSentence provides a mock function with given fields: id
func (_m *MockSentenceService) GetSentence(id string) (model.Sentence, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetSentence")
	}

	var r0 model.Sentence
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.Sentence, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) model.Sentence); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Sentence)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSentenceService_GetSentence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSentence'
type MockSentenceService_GetSentence_Call struct {
	*mock.Call
}

// GetSentence is a helper method to define mock.On call
//   - id string
func (_e *MockSentenceService_Expecter) GetSentence(id interface{}) *MockSentenceService_GetSentence_Call {
	return &MockSentenceService_GetSentence_Call{Call: _e.mock.On("GetSentence", id)}
}

func (_c *MockSentenceService_GetSentence_Call) Run(run func(id string)) *MockSentenceService_GetSentence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSentenceService_GetSentence_Call) Return(_a0 model.Sentence, _a1 error) *MockSentenceService_GetSentence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSentenceService_GetSentence_Call) RunAndReturn(run func(string) (model.Sentence, error)) *MockSentenceService_GetSentence_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSentenceService creates a new instance of MockSentenceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSentenceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSentenceService {
	mock := &MockSentenceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
