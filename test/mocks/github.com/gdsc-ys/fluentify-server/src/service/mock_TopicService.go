// Code generated by mockery v2.40.3. DO NOT EDIT.

package service_test

import (
	model "github.com/gdsc-ys/fluentify-server/src/model"
	mock "github.com/stretchr/testify/mock"
)

// MockTopicService is an autogenerated mock type for the TopicService type
type MockTopicService struct {
	mock.Mock
}

type MockTopicService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTopicService) EXPECT() *MockTopicService_Expecter {
	return &MockTopicService_Expecter{mock: &_m.Mock}
}

// GetTopic provides a mock function with given fields: id
func (_m *MockTopicService) GetTopic(id string) (model.Topic, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTopic")
	}

	var r0 model.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.Topic, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) model.Topic); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Topic)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTopicService_GetTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopic'
type MockTopicService_GetTopic_Call struct {
	*mock.Call
}

// GetTopic is a helper method to define mock.On call
//   - id string
func (_e *MockTopicService_Expecter) GetTopic(id interface{}) *MockTopicService_GetTopic_Call {
	return &MockTopicService_GetTopic_Call{Call: _e.mock.On("GetTopic", id)}
}

func (_c *MockTopicService_GetTopic_Call) Run(run func(id string)) *MockTopicService_GetTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTopicService_GetTopic_Call) Return(_a0 model.Topic, _a1 error) *MockTopicService_GetTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTopicService_GetTopic_Call) RunAndReturn(run func(string) (model.Topic, error)) *MockTopicService_GetTopic_Call {
	_c.Call.Return(run)
	return _c
}

// ListTopics provides a mock function with given fields:
func (_m *MockTopicService) ListTopics() ([]model.Topic, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListTopics")
	}

	var r0 []model.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Topic, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Topic); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTopicService_ListTopics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTopics'
type MockTopicService_ListTopics_Call struct {
	*mock.Call
}

// ListTopics is a helper method to define mock.On call
func (_e *MockTopicService_Expecter) ListTopics() *MockTopicService_ListTopics_Call {
	return &MockTopicService_ListTopics_Call{Call: _e.mock.On("ListTopics")}
}

func (_c *MockTopicService_ListTopics_Call) Run(run func()) *MockTopicService_ListTopics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTopicService_ListTopics_Call) Return(_a0 []model.Topic, _a1 error) *MockTopicService_ListTopics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTopicService_ListTopics_Call) RunAndReturn(run func() ([]model.Topic, error)) *MockTopicService_ListTopics_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTopicService creates a new instance of MockTopicService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTopicService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTopicService {
	mock := &MockTopicService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
