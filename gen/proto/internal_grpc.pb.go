// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: internal.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PronunciationFeedbackService_PronunciationFeedback_FullMethodName = "/proto.PronunciationFeedbackService/PronunciationFeedback"
)

// PronunciationFeedbackServiceClient is the client API for PronunciationFeedbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PronunciationFeedbackServiceClient interface {
	PronunciationFeedback(ctx context.Context, in *PronunciationFeedbackRequest, opts ...grpc.CallOption) (*PronunciationFeedbackResponse, error)
}

type pronunciationFeedbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPronunciationFeedbackServiceClient(cc grpc.ClientConnInterface) PronunciationFeedbackServiceClient {
	return &pronunciationFeedbackServiceClient{cc}
}

func (c *pronunciationFeedbackServiceClient) PronunciationFeedback(ctx context.Context, in *PronunciationFeedbackRequest, opts ...grpc.CallOption) (*PronunciationFeedbackResponse, error) {
	out := new(PronunciationFeedbackResponse)
	err := c.cc.Invoke(ctx, PronunciationFeedbackService_PronunciationFeedback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PronunciationFeedbackServiceServer is the server API for PronunciationFeedbackService service.
// All implementations must embed UnimplementedPronunciationFeedbackServiceServer
// for forward compatibility
type PronunciationFeedbackServiceServer interface {
	PronunciationFeedback(context.Context, *PronunciationFeedbackRequest) (*PronunciationFeedbackResponse, error)
	mustEmbedUnimplementedPronunciationFeedbackServiceServer()
}

// UnimplementedPronunciationFeedbackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPronunciationFeedbackServiceServer struct {
}

func (UnimplementedPronunciationFeedbackServiceServer) PronunciationFeedback(context.Context, *PronunciationFeedbackRequest) (*PronunciationFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PronunciationFeedback not implemented")
}
func (UnimplementedPronunciationFeedbackServiceServer) mustEmbedUnimplementedPronunciationFeedbackServiceServer() {
}

// UnsafePronunciationFeedbackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PronunciationFeedbackServiceServer will
// result in compilation errors.
type UnsafePronunciationFeedbackServiceServer interface {
	mustEmbedUnimplementedPronunciationFeedbackServiceServer()
}

func RegisterPronunciationFeedbackServiceServer(s grpc.ServiceRegistrar, srv PronunciationFeedbackServiceServer) {
	s.RegisterService(&PronunciationFeedbackService_ServiceDesc, srv)
}

func _PronunciationFeedbackService_PronunciationFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PronunciationFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PronunciationFeedbackServiceServer).PronunciationFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PronunciationFeedbackService_PronunciationFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PronunciationFeedbackServiceServer).PronunciationFeedback(ctx, req.(*PronunciationFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PronunciationFeedbackService_ServiceDesc is the grpc.ServiceDesc for PronunciationFeedbackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PronunciationFeedbackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PronunciationFeedbackService",
	HandlerType: (*PronunciationFeedbackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PronunciationFeedback",
			Handler:    _PronunciationFeedbackService_PronunciationFeedback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal.proto",
}

const (
	CommunicationFeedbackService_CommunicationFeedback_FullMethodName = "/proto.CommunicationFeedbackService/CommunicationFeedback"
)

// CommunicationFeedbackServiceClient is the client API for CommunicationFeedbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunicationFeedbackServiceClient interface {
	CommunicationFeedback(ctx context.Context, in *CommunicationFeedbackRequest, opts ...grpc.CallOption) (*CommunicationFeedbackResponse, error)
}

type communicationFeedbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunicationFeedbackServiceClient(cc grpc.ClientConnInterface) CommunicationFeedbackServiceClient {
	return &communicationFeedbackServiceClient{cc}
}

func (c *communicationFeedbackServiceClient) CommunicationFeedback(ctx context.Context, in *CommunicationFeedbackRequest, opts ...grpc.CallOption) (*CommunicationFeedbackResponse, error) {
	out := new(CommunicationFeedbackResponse)
	err := c.cc.Invoke(ctx, CommunicationFeedbackService_CommunicationFeedback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunicationFeedbackServiceServer is the server API for CommunicationFeedbackService service.
// All implementations must embed UnimplementedCommunicationFeedbackServiceServer
// for forward compatibility
type CommunicationFeedbackServiceServer interface {
	CommunicationFeedback(context.Context, *CommunicationFeedbackRequest) (*CommunicationFeedbackResponse, error)
	mustEmbedUnimplementedCommunicationFeedbackServiceServer()
}

// UnimplementedCommunicationFeedbackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommunicationFeedbackServiceServer struct {
}

func (UnimplementedCommunicationFeedbackServiceServer) CommunicationFeedback(context.Context, *CommunicationFeedbackRequest) (*CommunicationFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunicationFeedback not implemented")
}
func (UnimplementedCommunicationFeedbackServiceServer) mustEmbedUnimplementedCommunicationFeedbackServiceServer() {
}

// UnsafeCommunicationFeedbackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunicationFeedbackServiceServer will
// result in compilation errors.
type UnsafeCommunicationFeedbackServiceServer interface {
	mustEmbedUnimplementedCommunicationFeedbackServiceServer()
}

func RegisterCommunicationFeedbackServiceServer(s grpc.ServiceRegistrar, srv CommunicationFeedbackServiceServer) {
	s.RegisterService(&CommunicationFeedbackService_ServiceDesc, srv)
}

func _CommunicationFeedbackService_CommunicationFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunicationFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationFeedbackServiceServer).CommunicationFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunicationFeedbackService_CommunicationFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationFeedbackServiceServer).CommunicationFeedback(ctx, req.(*CommunicationFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommunicationFeedbackService_ServiceDesc is the grpc.ServiceDesc for CommunicationFeedbackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommunicationFeedbackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CommunicationFeedbackService",
	HandlerType: (*CommunicationFeedbackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommunicationFeedback",
			Handler:    _CommunicationFeedbackService_CommunicationFeedback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal.proto",
}
